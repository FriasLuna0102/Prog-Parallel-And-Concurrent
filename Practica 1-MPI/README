El proposito del programa es lograr la multiplicacion de matriz,
todo mediante el paso de mensaje, memoria compartida y distribuida.

Para lograrlo se utilizo la libreria MPI.

El programa basicamente lo que realiza es la multiplicacion de las matrices,
en primer lugar se inicializan las matrices en el rank cuando es igual a 0.
Una vez que se inicializa se empieza a tomar el tiempo de ejecucion para medir el rendimiento
del programa para correrlo con diferentes cantidades de procesadores. 

Luego se toman las filas por cada proceso, pero antes de utilizarlas se 
paan a matrices de formato unidimensionl debido a que MPI no permite hacer cast
a matrices bidimensionales.

Luego con el uso de las funciones Scatter y Bcast se distribuyen las matrices a todos los
diferentes procesos. Mediante el paso de mensajes se realiza la division de las porciones para realizar
el calculo en la matrix C.

Finalemnte se recogen todos los datos con la funcion Gather, para de esta forma luego mediante un for
lograr recorrer C para imprimir los resultados y luego finalizar el tiempo de ejecucion.

PARA COMPILAR EL PROGRAMA:

1: Descargar la libreria de MPJ desde su pagina oficial, y descomprimirla.
2: Luego instalar javac 1.8.
3: Exportar la carpeta descomprimida con el comando: export MPJ_HOME=/ruta/mpj
4: Exportar esa variable de entorno MPJ_HOME a la de PATH.
5: Compilar el Main.java con el comando: javac -cp $MPJ_HOME/lib/mpj.jar Main.java
6: Ejecutar el archivo class: $MPJ_HOME/bin/mpjrun.sh -np 2 Main  (el 2 indica la cantidad de procesadores que se utilizaran)

SALIDAS Y ENTRADAS:


Entrada: 
double[][] A = {{1, 2}, {3, 4}};
double[][] B = {{5, 6}, {7, 8}};


Salida:
Resultado de la multiplicación de matrices secuencial:
[19.0, 22.0]
[43.0, 50.0]

Resultado de la multiplicación de matrices paralela:
[19.0, 22.0]
[43.0, 50.0]
¿Los resultados son iguales?: true


Entrada:
double[][] A = {{3, 2}, {7, 4}};
double[][] B = {{3, 6}, {4, 8}};

Salida:
Resultado de la multiplicación de matrices secuencial:
[17.0, 34.0]
[37.0, 74.0]

Resultado de la multiplicación de matrices paralela:
[17.0, 34.0]
[37.0, 74.0]
¿Los resultados son iguales?: true


ANALISIS DEL RENDIMIENTO:

El tiempo de ejecucion para 2 procesadores es el siguiente: Tiempo de ejecución MPJ: 2 milisegundos, 
a medida que se aumentan los procesadores en la ejecucion aumenta el tiempo de ejecucion, veamos para 4,6,8,16.

4: Tiempo de ejecución MPJ: 2 milisegundos
6: Tiempo de ejecución MPJ: 3 milisegundos
8: Tiempo de ejecución MPJ: 6 milisegundos
16: Tiempo de ejecución MPJ: 12 milisegundos

La razon por la que sucede esto son las siguiente:

Overhead de comunicacion ya que al ser mayores procesadores necesitan comunicarse y eso toma tiempo.
Balance de carga por el hecho de que hay tantos procesadores la carga no se distribuye de la mejor manera al no ser tan intensivo el calculo.

